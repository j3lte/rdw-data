// *******************************************************
//
// Name: <%= it.item.full_name %>
<%- if (it.item.description.length > 0) { %>
//
<%- it.item.description.forEach(function(line) { %>
// <%= line %><% }); -%>
<%- } %>
//
// Category: <%= it.item.category %>
// Link: <%= it.item.link %>
// Permalink: <%= it.item.permalink %>
// Owner: <%= it.item.owner %>
// Creator: <%= it.item.creator %>
//
// *******************************************************

import type { AuthOpts, Options, SodaQuery } from "https://deno.land/x/soda@<%= it.item.sodaVersion %>/mod.ts";
import { createQueryWithDataset, DataType, Field } from "https://deno.land/x/soda@<%= it.item.sodaVersion %>/mod.ts";

/**
 * Return Data for <%= it.item.full_name %>
 */
export interface <%= it.item.name %>_ResponseData {<% it.item.columns.forEach(function(column) { %>
  /**
   * ### <%= column.name %>
   *
   * <% column.description.forEach(function(line) { %>
   * <%= line %><% }); %>
   *
   * **Type**: <%= column.datatype %>
   */
  <%= column.field_name %>?: <%= column.node_type %>;<% }); %>
}

/**
 * Fieldnames for **<%= it.item.name %>**
 *
 * | **Fieldname** | **Database Column Name** | **Data Type** |
 * | --------- | -------------------- | --------- |<% it.item.columns.forEach(function(column) { %>
 * | ``<%= column.big_name %>`` | ``<%= column.field_name %>`` | _<%= column.datatype %>_ |
<%- }); %>
 *
 * > You can use these fieldnames in your queries to filter, group, or sort your data.
 */
export const Fields = {<% it.item.columns.forEach(function(column) { %>
  /**
  * ### <%= column.name %>
  *
  * <% column.description.forEach(function(line) { %>
  * <%= line %><% }); %>
  *
  * **Type**: <%= column.datatype %>
  *
  * **Database Column Name**: `<%= column.field_name %>`
  */
  <%= column.big_name %>: Field("<%= column.field_name %>", <%= column.datatypeTemplate %>),<% }); %>
};

export const Info = {
  fields: [<% it.item.columns.forEach(function(column) { %>
    "<%= column.big_name %>",<% }); %>
  ],
  dataset: "<%= it.item.id %>",
  domain: "<%= it.item.domain %>",
  full_name: "<%= it.item.full_name %>",
  provider_name: "<%= it.item.name %>",
  url: "<%= it.item.link %>",
  api_docs: "https://dev.socrata.com/foundry/<%= it.item.domain %>/<%= it.item.id %>",
}

/**
 * ### <%= it.item.full_name %><% it.item.description.forEach(function(line) { %>
 * <%= line %><% }); %>
 *
 * **URL:** <%= it.item.link %>
 *
 * **API DOCS:** https://dev.socrata.com/foundry/<%= it.item.domain %>/<%= it.item.id %>
 *
 * **Dataset ID:** <%= it.item.id %>
 *
 * **Category:** <%= it.item.category %>
 *
 * -----------------------
 * This generates a SodaQuery for the <%= it.item.full_name %> dataset.
 *
 * @param auth - Authentification options
 * @param opts - Query options
 *
 * @example
 * ```ts
 * const data = await RDWQuery()
 *   .where(Where.like(Fields.<%= it.item.columns[0].big_name %>, "some_value")
 *   .limit(10)
 *   .offset(0);
 *   .execute();
 * ```
 */
export const RDWQuery = (auth: AuthOpts = {}, opts: Options = {}) =>
  createQueryWithDataset<<%= it.item.name %>_ResponseData>(Info.domain, Info.dataset, auth, {
    ...opts,
    strict: typeof opts.strict === "boolean" ? opts.strict : true,
  });

export const <%= it.item.name %>: {
  RDWQuery: (auth?: AuthOpts, opts?: Options) => SodaQuery<<%= it.item.name %>_ResponseData>;
  Fields: typeof Fields;
  Info: typeof Info;
} = {
  RDWQuery,
  Fields: Fields,
  Info: Info,
};
